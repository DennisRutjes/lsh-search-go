package lsh

import (
	"errors"
	"github.com/gasparian/lsh-search-go/store"
	"sync"
)

var (
	DistanceErr = errors.New("Distance can't be calculated")
)

// Record holds vector and it's unique identifier generated by `user`
type Record struct {
	ID  string
	Vec []float64
}

type LshConfig struct {
	mx             *sync.Mutex
	DistanceMetric int
	DistanceThrsh  float64
	MaxNN          int
}

// Config holds all needed constants for creating the Hasher instance
type Config struct {
	LshConfig
	HasherConfig
	Mean []float64
	Std  []float64
}

// LSHIndex holds buckets with vectors and hasher instance
type LSHIndex struct {
	config LshConfig
	index  store.Store
	hasher *Hasher
}

// New creates new instance of hasher and index, where generated hashes will be stored
func NewLsh(config Config, store store.Store) (*LSHIndex, error) {
	hasher := NewHasher(
		HasherConfig{
			NPermutes:      config.NPermutes,
			NPlanes:        config.NPlanes,
			BiasMultiplier: config.BiasMultiplier,
			Dims:           config.Dims,
		},
	)
	err := hasher.generate(config.Mean, config.Std)
	if err != nil {
		return nil, err
	}
	return &LSHIndex{
		config: LshConfig{
			mx:             new(sync.Mutex),
			DistanceMetric: config.DistanceMetric,
			DistanceThrsh:  config.DistanceThrsh,
			MaxNN:          config.MaxNN,
		},
		hasher: hasher,
		index:  store,
	}, nil
}

// Train fills new search index with vectors
func (lsh *LSHIndex) Train(records []Record) error {
	// TODO: add batching here
	err := lsh.index.Clear()
	if err != nil {
		return err
	}
	wg := sync.WaitGroup{}
	wg.Add(len(records))
	for _, record := range records {
		go func(record Record, wg *sync.WaitGroup) {
			hashes := lsh.hasher.getHashes(record.Vec)
			lsh.index.SetVector(record.ID, record.Vec)
			for perm, hash := range hashes {
				lsh.index.SetHash(perm, hash, record.ID)
			}
			wg.Done()
		}(record, &wg)
	}
	wg.Wait()
	return nil
}

// Search returns NNs for the query point
func (lsh *LSHIndex) Search(query []float64) ([]Record, error) {
	hashes := lsh.hasher.getHashes(query)
	lsh.config.mx.Lock()
	config := lsh.config
	lsh.config.mx.Unlock()

	closestSet := make(map[string]bool)
	closest := make([]Record, 0)
	for perm, hash := range hashes {
		if len(closest) >= config.MaxNN {
			break
		}
		iter, err := lsh.index.GetHashIterator(perm, hash)
		if err != nil {
			continue // NOTE: it's normal when we couldn't find bucket for the query point
		}
		for {
			if len(closest) >= config.MaxNN {
				break
			}
			id, opened := iter.Next()
			if !opened {
				break
			}

			if closestSet[id] {
				continue
			}
			vec, err := lsh.index.GetVector(id)
			if err != nil {
				return nil, err
			}
			var dist float64 = -1
			switch config.DistanceMetric {
			case Cosine:
				dist = CosineDist(vec, query)
			case Euclidian:
				dist = L2(vec, query)
			}
			if dist < 0 {
				return nil, DistanceErr
			}
			if dist <= config.DistanceThrsh {
				closestSet[id] = true
				closest = append(closest, Record{ID: id, Vec: vec})
			}
		}
	}
	return closest, nil
}

// DumpHasher serializes hasher
func (lsh *LSHIndex) DumpHasher() ([]byte, error) {
	return lsh.hasher.dump()
}

// LoadHasher fills hasher from byte array
func (lsh *LSHIndex) LoadHasher(inp []byte) error {
	return lsh.hasher.load(inp)
}
